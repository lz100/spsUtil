% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stack.R
\name{historyStack}
\alias{historyStack}
\title{history stack structure and methods}
\value{
an R6 class object
}
\description{
Some methods for a history stack data structure. It can store history
of certain repeating actions. For example, building the back-end of a file/image
editor, allow undo/redo actions.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{historyStack$new()}}
\item \href{#method-clear}{\code{historyStack$clear()}}
\item \href{#method-get}{\code{historyStack$get()}}
\item \href{#method-getPos}{\code{historyStack$getPos()}}
\item \href{#method-status}{\code{historyStack$status()}}
\item \href{#method-forward}{\code{historyStack$forward()}}
\item \href{#method-backward}{\code{historyStack$backward()}}
\item \href{#method-add}{\code{historyStack$add()}}
\item \href{#method-clone}{\code{historyStack$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create the history object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$new(items = NULL, limit = 25, verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{items}}{list, initial history step items to store on start}

\item{\code{limit}}{int, how many history steps can be stored in the stack,
default 25 steps}

\item{\code{verbose}}{bool, print some verbose message?}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear"></a>}}
\if{latex}{\out{\hypertarget{method-clear}{}}}
\subsection{Method \code{clear()}}{
clear all history steps in the stack
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$clear()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
retrieve the history from a certain position in the stack
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$get(pos = private$pos)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pos}}{int, which position to get the history from, default is current
step.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getPos"></a>}}
\if{latex}{\out{\hypertarget{method-getPos}{}}}
\subsection{Method \code{getPos()}}{
get current step position in the history stack
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$getPos()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-status"></a>}}
\if{latex}{\out{\hypertarget{method-status}{}}}
\subsection{Method \code{status()}}{
print out some status of the stack
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$status()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
returns a list of \code{pos}: current position (int); \code{len}: current
length of the history stack (int); \code{limit}: history stack storing limit (int);
\code{first}: is current step position the first of the stack (bool);
\code{last}: is current step position the last of the stack (bool)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-forward"></a>}}
\if{latex}{\out{\hypertarget{method-forward}{}}}
\subsection{Method \code{forward()}}{
move one step forward in the history stack and return item
in that position
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$forward()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-backward"></a>}}
\if{latex}{\out{\hypertarget{method-backward}{}}}
\subsection{Method \code{backward()}}{
move one step backward in the history stack and return item
in that position
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$backward()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
Add an item to the history and move one step forward
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$add(item)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{item}}{any object you want to add to the stack. Everything store
in the item will be moved into a list, so even if item may be something
length > 1, it will still be treated as a single item and single history
step.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If current position is not the last position, and when a new
step item is added to the stack, all history records (items) after current
position will be removed before adding the new history item.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{historyStack$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
